//-
  ztncui - ZeroTier network controller UI
  Copyright (C) 2017-2021  Key Networks (https://key-networks.com)
  Licensed under GPLv3 - see LICENSE for details.

extends network_layout

block net_content
  script.
    function randomOctet() {
      return Math.floor(Math.random() * 255);
    }

    function randomIPv4() {
      const networkCIDR = document.getElementById('networkCIDR');
      const CIDR = '10.' + randomOctet() + '.' + randomOctet() + '.0/24';
      networkCIDR.value = CIDR;
      CIDRtoPool(CIDR);
    }

    function int32toIPv4String(int32) {
      let ipv4 = '';
      ipv4 = ((int32 & 0xff000000)>>>24).toString();
      ipv4 += '.' + ((int32 & 0x00ff0000)>>>16).toString();
      ipv4 += '.' + ((int32 & 0x0000ff00)>>>8).toString();
      ipv4 += '.' + (int32 & 0x000000ff).toString();
      return ipv4;
    }

    function CIDRtoPool(CIDR) {
      const [start, prefix] = CIDR.split('/');
      if (undefined !== start && undefined !== prefix &&
       prefix > 0 && prefix < 33 &&
       /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(start)
      ){
        const host32 = ((1 << (32 - parseInt(prefix))) - 1) >>> 0;
        const net = start.split('.').map(oct => {return parseInt(oct)});
        let net32 = 0 >>> 0;
        net32 = (net[0]<<24) + (net[1]<<16) + (net[2]<<8) + (net[3]);
        net32 &= ~host32;
        bcast32 = net32 + host32;
        const networkCIDR = document.getElementById('networkCIDR');
        const poolStart = document.getElementById('poolStart');
        const poolEnd = document.getElementById('poolEnd');
        networkCIDR.value = int32toIPv4String(net32) + '/' + prefix;
        poolStart.value = int32toIPv4String(net32 + 1);  
        poolEnd.value = int32toIPv4String(bcast32 - 1);
      } else {
        poolStart.value = 'Invalid network CIDR';
        poolEnd.value = 'Invalid network CIDR';
      }
    }

  if message
    .alert.alert-info
      strong= message

  form(method='POST' action='')
    .form-group
      button.btn.btn-link.float-right(type='button' data-toggle='collapse' data-target='#help') 帮助
      .collapse(id='help')
        p 请注意，此实用程序在此阶段仅支持IPv4.
        p 使用以下按钮自动生成随机网络地址，否则手动填写网络地址CIDR，IP分配池将自动为您计算。您可以手动更改这些计算值.

    .form-group
      button.btn.btn-primary(id='genIPv4' type='button' onclick='randomIPv4()') 生成网络地址

    .form-group
      label(for='networkCIDR') CIDR表示法中的网络地址
      input#networkCIDR.form-control(type='text' name='networkCIDR' onchange='CIDRtoPool(this.value)' placeholder='e.g. 10.11.12.0/24' value=(undefined===network.routes[0]? '' : network.routes[0].target))

    .form-group
      label(for='poolStart') IP分配池开始
      input#poolStart.form-control(type='text' name='poolStart' placeholder='e.g. 10.11.12.1' value=(undefined===network.ipAssignmentPools[0]? '' : network.ipAssignmentPools[0].ipRangeStart))

    .form-group
      label(for='poolEnd') IP分配池结束
      input#poolEnd.form-control(type='text' name='poolEnd' placeholder='e.g. 10.11.12.254' value=(undefined===network.ipAssignmentPools[0]? '' : network.ipAssignmentPools[0].ipRangeEnd))

    .form-group(style='padding-top: 10px')
      button.btn.btn-primary(type='submit') 提交
      = ' '
      a.btn.btn-default(href=('/controller/network/' + network.nwid) name='cancel' role='button') 取消

    if errors
      ul
        for err in errors
          li!= err.msg
